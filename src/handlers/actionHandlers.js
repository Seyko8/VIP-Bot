const { Markup } = require('telegraf');
const { MESSAGES } = require('../constants');
const { getOrCreateTopic } = require('../utils/topic');
const { createInviteLink } = require('../utils/inviteLink');
const { safeSendMessage, safeEditMessageText } = require('../utils/messageHandler');

// ‚úÖ **Speichert den letzten Code-Typ (25‚Ç¨, 50‚Ç¨, 100‚Ç¨) pro User**
const userLastCodeType = new Map();

const actionHandlers = {
    redeem_25: async (ctx) => {
        console.log(`üîç 25‚Ç¨ Code angefordert von User: ${ctx.from.id}`);
        userLastCodeType.set(ctx.from.id.toString(), "25‚Ç¨");
        await safeSendMessage(ctx, ctx.chat.id, MESSAGES.SEND_25_CODE);
    },

    redeem_100: async (ctx) => {
        console.log(`üîç 100‚Ç¨ Code angefordert von User: ${ctx.from.id}`);
        userLastCodeType.set(ctx.from.id.toString(), "100‚Ç¨");
        await safeSendMessage(ctx, ctx.chat.id, MESSAGES.SEND_100_CODE);
    },

    redeem: async (ctx) => {
        console.log(`üîç 50‚Ç¨ Code angefordert von User: ${ctx.from.id}`);
        userLastCodeType.set(ctx.from.id.toString(), "50‚Ç¨");
        await safeSendMessage(ctx, ctx.chat.id, MESSAGES.SEND_CODE);
    },

    ticket: async (ctx, userId) => {
        console.log(`üì© Support-Ticket wird f√ºr User: ${userId} erstellt.`);
        const threadId = await getOrCreateTopic(ctx, userId);
        if (!threadId) {
            console.error("‚ùå Fehler beim Erstellen des Support-Tickets!");
            return safeSendMessage(ctx, ctx.chat.id, MESSAGES.ERROR_CREATING_TICKET);
        }
        return safeSendMessage(ctx, ctx.chat.id, MESSAGES.TICKET_CREATED);
    },

    accept: async (ctx, userId) => {
        console.log(`‚úÖ Accept gedr√ºckt f√ºr User: ${userId}`);

        if (!userId || isNaN(userId)) {
            console.error("‚ùå Fehler: Ung√ºltige User-ID!");
            return safeSendMessage(ctx, ctx.chat.id, MESSAGES.GENERAL_ERROR);
        }

        // ‚úÖ **Code-Typ aus der Map abrufen**
        const storedUserId = userId.toString();
        const codeType = userLastCodeType.get(storedUserId) || "50‚Ç¨"; // Falls kein Typ gespeichert ist, Standard = 50‚Ç¨

        // ‚úÖ **Gruppen-ID anhand des Code-Typs aus ENV**
        let groupIds = [];
        if (codeType === "100‚Ç¨") {
            groupIds = [
                process.env.GROUP_ID_100_1,
                process.env.GROUP_ID_100_2,
                process.env.GROUP_ID_100_3,
                process.env.GROUP_ID_100_4,
            ];
        } else if (codeType === "25‚Ç¨") {
            groupIds = [process.env.GROUP_ID_25];
        } else {
            groupIds = [
                process.env.GROUP_ID_50_1,
                process.env.GROUP_ID_50_2,
            ];
        }

        console.log(`üîç Gruppen-IDs f√ºr ${codeType}: ${groupIds}`);

        if (groupIds.includes(undefined)) {
            console.error("‚ùå Fehler: Eine oder mehrere Gruppen-IDs sind undefined!");
            return safeSendMessage(ctx, ctx.chat.id, "‚ö†Ô∏è Fehler: Eine oder mehrere Gruppen-IDs nicht gefunden. Bitte pr√ºfe die .env Datei!");
        }

        // ‚úÖ **Invite-Link generieren**
        const inviteLinks = [];
        const inviteLinkCount = codeType === "100‚Ç¨" ? 4 : 1; // Reduziere die Anzahl der Links f√ºr 25‚Ç¨
        for (let i = 0; i < inviteLinkCount; i++) {
            const inviteLink = await createInviteLink(ctx, userId, groupIds[i % groupIds.length], { expires_in: 86400, member_limit: 1 });
            if (!inviteLink) {
                console.error("‚ùå Fehler beim Erstellen des Invite-Links!");
                return safeSendMessage(ctx, ctx.chat.id, MESSAGES.ERROR_INVITE_LINK);
            }
            inviteLinks.push(inviteLink);
        }

        // ‚úÖ **Passende Nachricht basierend auf dem Code-Typ**
        let message;
        if (codeType === "100‚Ç¨") {
            message = MESSAGES.CODE_100_ACCEPTED;
        } else if (codeType === "25‚Ç¨") {
            message = MESSAGES.CODE_25_ACCEPTED;
        } else {
            message = MESSAGES.CODE_ACCEPTED;
        }

        console.log(`‚úÖ Invite-Links erstellt: ${inviteLinks.join('\n')}`);
        await safeSendMessage(ctx, userId, `${message}\nüîó **Deine Invite-Links:**\n${inviteLinks.join('\n')}`);

        const updatedMessage = `${ctx.callbackQuery.message.text}\n\nStatus: ‚úÖ Akzeptiert`;
        return safeEditMessageText(ctx, updatedMessage);
    },

    deny: async (ctx, userId) => {
        console.log(`‚ùå Code f√ºr User ${userId} abgelehnt.`);
        const keyboard = Markup.inlineKeyboard([
            [Markup.button.callback('‚úâÔ∏è Support kontaktieren', `ticket_${userId}`)]
        ]);

        const updatedMessage = `${ctx.callbackQuery.message.text}\n\nStatus: ‚ùå Abgelehnt`;
        await safeSendMessage(ctx, userId, MESSAGES.CODE_DENIED, keyboard);
        return safeEditMessageText(ctx, updatedMessage);
    }
};

const handleAction = async (ctx) => {
    const callbackData = ctx.callbackQuery.data;
    console.log("üîç Empfangene Callback-Daten:", callbackData);

    const [action, userId] = callbackData.split('_');
    const handler = actionHandlers[action];

    if (!handler) {
        console.error(`‚ùå Unbekannte Aktion: ${callbackData}`);
        return;
    }

    try {
        console.log(`üîç Verarbeite Aktion: ${action} f√ºr User: ${userId} | Code-Typ: ${userLastCodeType.get(userId)}`);
        return await handler(ctx, userId);
    } catch (error) {
        console.error(`‚ùå Fehler bei der Ausf√ºhrung der Aktion ${action}:`, error);
    }
};

module.exports = {
    handleAction,
    userLastCodeType // ‚úÖ Exportiert, damit `messageHandlers.js` darauf zugreifen kann
};